import numpy as np
import matplotlib.pyplot as plt

# 原始图像
original_image = ...  # 请替换为实际的原始图像

# 噪声图像
noisy_image = ...  # 请替换为实际的带噪声图像

# 噪声自相关函数
noise_autocorrelation = ...  # 请替换为实际的噪声自相关函数

# 恢复图像函数
def wiener_filter(restoration_filter, noise_power_spectrum, signal_power_spectrum, snr_known=False, snr=None):
    if snr_known:
        # 已知信噪比
        restoration_filter /= (signal_power_spectrum + snr / noise_power_spectrum)
    else:
        # 未知信噪比
        restoration_filter /= (signal_power_spectrum + noise_power_spectrum)

    restored_image = np.fft.ifft2(np.fft.fft2(noisy_image) * restoration_filter).real
    return restored_image

# 估计信噪比函数
def estimate_snr(noisy_image, noise_power_spectrum):
    signal_power_spectrum = np.abs(np.fft.fft2(original_image)) ** 2
    signal_power = np.sum(signal_power_spectrum)
    noise_power = np.sum(noise_power_spectrum)
    snr = signal_power / noise_power
    return snr

# 计算功率谱密度函数
def power_spectrum_density(image):
    return np.abs(np.fft.fft2(image)) ** 2

# 噪声功率谱密度
noise_power_spectrum = np.abs(np.fft.fft2(noisy_image)) ** 2

# 图像功率谱密度
signal_power_spectrum = power_spectrum_density(original_image)

# 维纳滤波恢复图像（信噪比未知）
restored_image_unknown_snr = wiener_filter(np.conj(noise_power_spectrum), noise_power_spectrum, signal_power_spectrum)

# 估计信噪比
estimated_snr = estimate_snr(noisy_image, noise_power_spectrum)

# 维纳滤波恢复图像（信噪比已知）
restored_image_known_snr = wiener_filter(np.conj(noise_power_spectrum), noise_power_spectrum, signal_power_spectrum, snr_known=True, snr=estimated_snr)

# 显示结果
fig, axes = plt.subplots(1, 3, figsize=(12, 4))

axes[0].imshow(original_image, cmap='gray')
axes[0].set_title('Original Image')

axes[1].imshow(noisy_image, cmap='gray')
axes[1].set_title('Noisy Image')

axes[2].imshow(restored_image_unknown_snr, cmap='gray')
axes[2].set_title('Restored Image (Unknown SNR)')

fig.tight_layout()
plt.show()
