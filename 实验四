import numpy as np
import cv2
import matplotlib.pyplot as plt

# 读取图像
image = cv2.imread('input_image.jpg', cv2.IMREAD_GRAYSCALE)

# 大津法阈值分割
otsu_threshold, otsu_image = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# 迭代法阈值分割
def iterative_thresholding(image, initial_threshold):
    threshold = initial_threshold
    while True:
        foreground = image > threshold
        background = image <= threshold
        foreground_mean = np.mean(image[foreground])
        background_mean = np.mean(image[background])
        new_threshold = (foreground_mean + background_mean) / 2
        if abs(threshold - new_threshold) < 1e-6:
            break
        threshold = new_threshold

    iterative_image = np.zeros_like(image, dtype=np.uint8)
    iterative_image[image > threshold] = 255

    return threshold, iterative_image

initial_threshold = np.mean(image)
iterative_threshold, iterative_image = iterative_thresholding(image, initial_threshold)

# 显示结果
titles = ['Original Image', 'Otsu Thresholding', 'Iterative Thresholding']
images = [image, otsu_image, iterative_image]

fig, axes = plt.subplots(1, 3, figsize=(12, 4))

for ax, title, img in zip(axes, titles, images):
    ax.imshow(img, cmap='gray')
    ax.set_title(title)
    ax.axis('off')

plt.tight_layout()
plt.show()

# 比较性能差异
otsu_threshold, iterative_threshold = int(otsu_threshold), int(iterative_threshold)
print(f'Otsu Threshold: {otsu_threshold}')
print(f'Iterative Threshold: {iterative_threshold}')

otsu_pixel_count = np.sum(otsu_image == 255)
iterative_pixel_count = np.sum(iterative_image == 255)

otsu_accuracy = otsu_pixel_count / image.size
iterative_accuracy = iterative_pixel_count / image.size

print(f'Otsu Accuracy: {otsu_accuracy:.4f}')
print(f'Iterative Accuracy: {iterative_accuracy:.4f}')
